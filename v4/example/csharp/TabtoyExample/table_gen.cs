// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 
using System;
using System.Collections.Generic;

namespace main
{ 	
	public enum SkillCondition
	{ 
		None = 0, // None 
		Begin = 1, // Begin 
		Tick = 2, // Tick 
	}
	
	public enum SkillEffect
	{ 
		None = 0, // None 
		CastSkill = 1, // CastSkill 
		AddBuff = 2, // AddBuff 
		DoDamage = 3, // DoDamage 
		DoHeal = 4, // DoHeal 
	}
		
	public partial class Config : tabtoy.ITableSerializable
	{ 
		public string LocalIP = string.Empty;
		public Int32 ServerPort = 0;
		public List<string> BattleServer = new List<string>();
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x80000:
                	{
						reader.ReadString( ref LocalIP );
                	}
					break;
					case 0x20001:
                	{
						reader.ReadInt32( ref ServerPort );
                	}
					break;
					case 0x6c0002:
                	{
						reader.ReadString( ref BattleServer );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class Item : tabtoy.ITableSerializable
	{ 
		public Int32 Id = 0;
		public string Desc = string.Empty;
		public Int32 Type = 0;
		public bool ShowInBag = false;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x20000:
                	{
						reader.ReadInt32( ref Id );
                	}
					break;
					case 0x80001:
                	{
						reader.ReadString( ref Desc );
                	}
					break;
					case 0x20002:
                	{
						reader.ReadInt32( ref Type );
                	}
					break;
					case 0x90003:
                	{
						reader.ReadBool( ref ShowInBag );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class Skill : tabtoy.ITableSerializable
	{ 
		public Int32 Id = 0;
		public string Desc = string.Empty;
		public Int32 CD = 0;
		public SkillCondition Condition1 = SkillCondition.None;
		public SkillEffect Effect1 = SkillEffect.None;
		public Int32 Param1 = 0;
		public SkillCondition Condition2 = SkillCondition.None;
		public SkillEffect Effect2 = SkillEffect.None;
		public Int32 Param3 = 0;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x20000:
                	{
						reader.ReadInt32( ref Id );
                	}
					break;
					case 0x80001:
                	{
						reader.ReadString( ref Desc );
                	}
					break;
					case 0x20002:
                	{
						reader.ReadInt32( ref CD );
                	}
					break;
					case 0xa0003:
                	{
						reader.ReadEnum( ref Condition1 );
                	}
					break;
					case 0xa0004:
                	{
						reader.ReadEnum( ref Effect1 );
                	}
					break;
					case 0x20005:
                	{
						reader.ReadInt32( ref Param1 );
                	}
					break;
					case 0xa0006:
                	{
						reader.ReadEnum( ref Condition2 );
                	}
					break;
					case 0xa0007:
                	{
						reader.ReadEnum( ref Effect2 );
                	}
					break;
					case 0x20008:
                	{
						reader.ReadInt32( ref Param3 );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	

	// Combine struct
	public partial class Table
	{ 
		// table: Config
		public List<Config> Config = new List<Config>(); 
		// table: Item
		public List<Item> Item = new List<Item>(); 
		// table: Skill
		public List<Skill> Skill = new List<Skill>(); 

		// Indices
		public Dictionary<Int32,Item> ItemById = new Dictionary<Int32,Item>();
		public Dictionary<Int32,Skill> SkillById = new Dictionary<Int32,Skill>();
		
		
		
		
		// table: Config
		public Config GetKeyValue_Config()
		{
			return Config[0];
		}

		public void ResetData( )
		{   
			Config.Clear(); 
			Item.Clear(); 
			Skill.Clear();  
			ItemById.Clear();
			SkillById.Clear();
				
		}
		
		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();

			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
				if (mamaSaidTagNameShouldBeLong == 0x6f0000)
				{
                    var tabName = string.Empty;
                    reader.ReadString(ref tabName);
					switch (tabName)
					{ 
						case "Config":
						{
							reader.ReadStruct(ref Config);	
						}
						break;
						case "Item":
						{
							reader.ReadStruct(ref Item);	
						}
						break;
						case "Skill":
						{
							reader.ReadStruct(ref Skill);	
						}
						break;
						default:
						{
							reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
						}
						break;
					}
				}
			}
		}

		public void IndexData( string tabName = "")
		{ 	
			if (tabName == "" || tabName == "Item")
			{
				foreach( var kv in Item )
				{
					ItemById[kv.Id] = kv;
				}
				
			}
				
			if (tabName == "" || tabName == "Skill")
			{
				foreach( var kv in Skill )
				{
					SkillById[kv.Id] = kv;
				}
				
			}
			
		}
		
	}
}
