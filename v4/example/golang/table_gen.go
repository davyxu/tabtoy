// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version:
package main

import "errors"

type TableEnumValue struct {
	Name  string
	Index int32
}

type Item struct {
	Id        int32
	Desc      string
	Type      int32
	ShowInBag bool
}

type Skill struct {
	Id         int32
	Desc       string
	CD         int32
	Condition1 int32
	Effect1    int32
	Param1     int32
	Condition2 int32
	Effect2    int32
	Param3     int32
}

type Config struct {
	LocalIP      string
	ServerPort   int32
	BattleServer []string
}

// Combine struct
type Table struct {
	Item   []*Item   // table: Item
	Skill  []*Skill  // table: Skill
	Config []*Config // table: Config

	// Indices
	ItemById  map[int32]*Item  `json:"-"` // table: Item
	SkillById map[int32]*Skill `json:"-"` // table: Skill

	// Handlers
	postHandlers []func(*Table) error
	preHandlers  []func(*Table) error

	indexHandler map[string]func()
	resetHandler map[string]func()
}

// table: Config
func (self *Table) KV_Config() *Config {
	return self.Config[0]
}

// 注册加载后回调(用于构建数据)
func (self *Table) RegisterPostEntry(h func(*Table) error) {

	if h == nil {
		panic("empty postload handler")
	}

	self.postHandlers = append(self.postHandlers, h)
}

// 注册加载前回调(用于清除数据)
func (self *Table) RegisterPreEntry(h func(*Table) error) {

	if h == nil {
		panic("empty preload handler")
	}

	self.preHandlers = append(self.preHandlers, h)
}

// 清除索引和数据
func (self *Table) ResetData() error {

	err := self.InvokePreHandler()
	if err != nil {
		return err
	}

	return self.ResetTable("")
}

// 全局表构建索引及通知回调
func (self *Table) BuildData() error {

	err := self.IndexTable("")
	if err != nil {
		return err
	}

	return self.InvokePostHandler()
}

// 调用加载前回调
func (self *Table) InvokePreHandler() error {
	for _, h := range self.preHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 调用加载后回调
func (self *Table) InvokePostHandler() error {
	for _, h := range self.postHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 为表建立索引. 表名为空时, 构建所有表索引
func (self *Table) IndexTable(tableName string) error {

	if tableName == "" {

		for _, h := range self.indexHandler {
			h()
		}
		return nil

	} else {
		if h, ok := self.indexHandler[tableName]; ok {
			h()
		}

		return nil
	}
}

// 重置表格数据
func (self *Table) ResetTable(tableName string) error {
	if tableName == "" {
		for _, h := range self.resetHandler {
			h()
		}

		return nil
	} else {
		if h, ok := self.resetHandler[tableName]; ok {
			h()
			return nil
		}

		return errors.New("reset table failed, table not found: " + tableName)
	}
}

// 初始化表实例
func NewTable() *Table {

	self := &Table{
		indexHandler: make(map[string]func()),
		resetHandler: make(map[string]func()),
	}

	self.indexHandler["Item"] = func() {

		for _, v := range self.Item {
			self.ItemById[v.Id] = v
		}
	}

	self.indexHandler["Skill"] = func() {

		for _, v := range self.Skill {
			self.SkillById[v.Id] = v
		}
	}

	self.indexHandler["Config"] = func() {

	}

	self.resetHandler["Item"] = func() {
		self.Item = nil

		self.ItemById = map[int32]*Item{}
	}
	self.resetHandler["Skill"] = func() {
		self.Skill = nil

		self.SkillById = map[int32]*Skill{}
	}
	self.resetHandler["Config"] = func() {
		self.Config = nil

	}

	self.ResetData()

	return self
}

func init() {

}
