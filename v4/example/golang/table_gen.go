// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version:
package main

import "errors"

type TableEnumValue struct {
	Name  string
	Index int32
}

type SkillCondition int32

const (
	SkillCondition_None  = 0 //
	SkillCondition_Begin = 1 // 技能开始
	SkillCondition_Tick  = 2 // 技能更新
)

var (
	SkillConditionEnumValues = []TableEnumValue{
		{Name: "None", Index: 0},  //
		{Name: "Begin", Index: 1}, // 技能开始
		{Name: "Tick", Index: 2},  // 技能更新
	}
	SkillConditionMapperValueByName = map[string]int32{}
	SkillConditionMapperNameByValue = map[int32]string{}
)

func (self SkillCondition) String() string {
	name, _ := SkillConditionMapperNameByValue[int32(self)]
	return name
}

type SkillEffect int32

const (
	SkillEffect_None      = 0 //
	SkillEffect_CastSkill = 1 // 释放技能
	SkillEffect_AddBuff   = 2 // 添加Buff
	SkillEffect_DoDamage  = 3 // 输出伤害
	SkillEffect_DoHeal    = 4 // 输出治疗
)

var (
	SkillEffectEnumValues = []TableEnumValue{
		{Name: "None", Index: 0},      //
		{Name: "CastSkill", Index: 1}, // 释放技能
		{Name: "AddBuff", Index: 2},   // 添加Buff
		{Name: "DoDamage", Index: 3},  // 输出伤害
		{Name: "DoHeal", Index: 4},    // 输出治疗
	}
	SkillEffectMapperValueByName = map[string]int32{}
	SkillEffectMapperNameByValue = map[int32]string{}
)

func (self SkillEffect) String() string {
	name, _ := SkillEffectMapperNameByValue[int32(self)]
	return name
}

type Config struct {
	LocalIP      string   // 本地ip
	ServerPort   int32    // 服务器端口
	BattleServer []string // 战斗服ip
}

type Item struct {
	Id        int32  // Id
	Desc      string // 描述
	Type      int32  // 类型
	ShowInBag bool   // 背包显示
}

type Skill struct {
	Id         int32          // Id
	Desc       string         // 描述
	CD         int32          // 技能cd
	Condition1 SkillCondition // 触发条件1
	Effect1    SkillEffect    // 效果1
	Param1     int32          // 参数1
	Condition2 SkillCondition // 触发条件2
	Effect2    SkillEffect    // 效果2
	Param3     int32          // 参数2
}

// Combine struct
type Table struct {
	Config []*Config // table: Config
	Item   []*Item   // table: Item
	Skill  []*Skill  // table: Skill

	// Indices
	ItemById  map[int32]*Item  `json:"-"` // table: Item
	SkillById map[int32]*Skill `json:"-"` // table: Skill

	// Handlers
	postHandlers []func(*Table) error
	preHandlers  []func(*Table) error

	indexHandler map[string]func()
	resetHandler map[string]func()
}

// table: Config
func (self *Table) KV_Config() *Config {
	return self.Config[0]
}

// 注册加载后回调(用于构建数据)
func (self *Table) RegisterPostEntry(h func(*Table) error) {

	if h == nil {
		panic("empty postload handler")
	}

	self.postHandlers = append(self.postHandlers, h)
}

// 注册加载前回调(用于清除数据)
func (self *Table) RegisterPreEntry(h func(*Table) error) {

	if h == nil {
		panic("empty preload handler")
	}

	self.preHandlers = append(self.preHandlers, h)
}

// 清除索引和数据
func (self *Table) ResetData() error {

	err := self.InvokePreHandler()
	if err != nil {
		return err
	}

	return self.ResetTable("")
}

// 全局表构建索引及通知回调
func (self *Table) BuildData() error {

	err := self.IndexTable("")
	if err != nil {
		return err
	}

	return self.InvokePostHandler()
}

// 调用加载前回调
func (self *Table) InvokePreHandler() error {
	for _, h := range self.preHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 调用加载后回调
func (self *Table) InvokePostHandler() error {
	for _, h := range self.postHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 为表建立索引. 表名为空时, 构建所有表索引
func (self *Table) IndexTable(tableName string) error {

	if tableName == "" {

		for _, h := range self.indexHandler {
			h()
		}
		return nil

	} else {
		if h, ok := self.indexHandler[tableName]; ok {
			h()
		}

		return nil
	}
}

// 重置表格数据
func (self *Table) ResetTable(tableName string) error {
	if tableName == "" {
		for _, h := range self.resetHandler {
			h()
		}

		return nil
	} else {
		if h, ok := self.resetHandler[tableName]; ok {
			h()
			return nil
		}

		return errors.New("reset table failed, table not found: " + tableName)
	}
}

// 初始化表实例
func NewTable() *Table {

	self := &Table{
		indexHandler: make(map[string]func()),
		resetHandler: make(map[string]func()),
	}

	self.indexHandler["Config"] = func() {

	}

	self.indexHandler["Item"] = func() {

		for _, v := range self.Item {
			self.ItemById[v.Id] = v
		}
	}

	self.indexHandler["Skill"] = func() {

		for _, v := range self.Skill {
			self.SkillById[v.Id] = v
		}
	}

	self.resetHandler["Config"] = func() {
		self.Config = nil

	}
	self.resetHandler["Item"] = func() {
		self.Item = nil

		self.ItemById = map[int32]*Item{}
	}
	self.resetHandler["Skill"] = func() {
		self.Skill = nil

		self.SkillById = map[int32]*Skill{}
	}

	self.ResetData()

	return self
}

func init() {

	for _, v := range SkillConditionEnumValues {
		SkillConditionMapperValueByName[v.Name] = v.Index
		SkillConditionMapperNameByValue[v.Index] = v.Name
	}

	for _, v := range SkillEffectEnumValues {
		SkillEffectMapperValueByName[v.Name] = v.Index
		SkillEffectMapperNameByValue[v.Index] = v.Name
	}

}
