package printer

import (
	"fmt"

	"github.com/davyxu/pbmeta"
	"github.com/davyxu/tabtoy/exportorv1/data"
)

type pbtWriter struct {
	printerfile
}

func (self *pbtWriter) RepeatedMessageBegin(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, msgCount int, indent int) {

}

// Value是消息的字段
func (self *pbtWriter) WriteMessage(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, indent int) {

	pos := self.printer.Len()

	self.printer.WriteString(fmt.Sprintf("%s {", fd.Name()))

	valueWrite := rawWriteMessage(&self.printer, self, msg, indent)

	self.printer.WriteString("}")

	// 如果没写入值, 将回滚写入
	if valueWrite == 0 {
		self.printer.Truncate(pos)
	}
}

func (self *pbtWriter) RepeatedMessageEnd(fd *pbmeta.FieldDescriptor, msg *data.DynamicMessage, msgCount int, indent int) {

}

func (self *pbtWriter) RepeatedValueBegin(fd *pbmeta.FieldDescriptor) {

}

// 普通值
func (self *pbtWriter) WriteValue(fd *pbmeta.FieldDescriptor, value string, indent int) {

	self.printer.WriteString(fmt.Sprintf("%s: %s", fd.Name(), valueWrapper(fd, value)))
}

func (self *pbtWriter) RepeatedValueEnd(fd *pbmeta.FieldDescriptor) {

}

func (self *pbtWriter) WriteFieldSpliter() {

	self.printer.WriteString(" ")
}

func (self *pbtWriter) PrintMessage(msg *data.DynamicMessage) bool {

	rawWriteMessage(&self.printer, self, msg, 0)

	return true
}

func NewPBTWriter() IPrinter {

	self := &pbtWriter{}
	self.printer.WriteString("# Generated by github.com/davyxu/tabtoy\n")

	return self
}
